#pragma checksum "c:\Users\Tobiv\Source\Workspaces\MunchkinApp\MunchkinUWP\UI\Pages\BattlePage.xaml" "{406ea660-64cf-4c82-b6f0-42d48172a799}" "2119806ED182208806B027BE33472474"
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MunchkinUWP.Pages
{
    partial class BattlePage : 
        global::Windows.UI.Xaml.Controls.Page, 
        global::Windows.UI.Xaml.Markup.IComponentConnector,
        global::Windows.UI.Xaml.Markup.IComponentConnector2
    {
        internal class XamlBindingSetters
        {
            public static void Set_Windows_UI_Xaml_Controls_ItemsControl_ItemsSource(global::Windows.UI.Xaml.Controls.ItemsControl obj, global::System.Object value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Object) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Object), targetNullValue);
                }
                obj.ItemsSource = value;
            }
            public static void Set_Windows_UI_Xaml_Controls_Primitives_ToggleButton_IsChecked(global::Windows.UI.Xaml.Controls.Primitives.ToggleButton obj, global::System.Nullable<global::System.Boolean> value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Nullable<global::System.Boolean>) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Nullable<global::System.Boolean>), targetNullValue);
                }
                obj.IsChecked = value;
            }
            public static void Set_Windows_UI_Xaml_Controls_TextBlock_Text(global::Windows.UI.Xaml.Controls.TextBlock obj, global::System.String value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = targetNullValue;
                }
                obj.Text = value ?? global::System.String.Empty;
            }
            public static void Set_Windows_UI_Xaml_Documents_Run_Text(global::Windows.UI.Xaml.Documents.Run obj, global::System.String value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = targetNullValue;
                }
                obj.Text = value ?? global::System.String.Empty;
            }
        };

        private class BattlePage_obj2_Bindings :
            global::Windows.UI.Xaml.IDataTemplateExtension,
            global::Windows.UI.Xaml.Markup.IComponentConnector,
            IBattlePage_Bindings
        {
            private global::MunchkinUWP.Model.Munchkin dataRoot;
            private bool initialized = false;
            private const int NOT_PHASED = (1 << 31);
            private const int DATA_CHANGED = (1 << 30);
            private bool removedDataContextHandler = false;

            // Fields for each control that has bindings.
            private global::Windows.UI.Xaml.Controls.TextBlock obj3;
            private global::Windows.UI.Xaml.Documents.Run obj4;
            private global::Windows.UI.Xaml.Documents.Run obj5;
            private global::Windows.UI.Xaml.Documents.Run obj6;

            private BattlePage_obj2_BindingsTracking bindingsTracking;

            public BattlePage_obj2_Bindings()
            {
                this.bindingsTracking = new BattlePage_obj2_BindingsTracking(this);
            }

            // IComponentConnector

            public void Connect(int connectionId, global::System.Object target)
            {
                switch(connectionId)
                {
                    case 3:
                        this.obj3 = (global::Windows.UI.Xaml.Controls.TextBlock)target;
                        break;
                    case 4:
                        this.obj4 = (global::Windows.UI.Xaml.Documents.Run)target;
                        break;
                    case 5:
                        this.obj5 = (global::Windows.UI.Xaml.Documents.Run)target;
                        break;
                    case 6:
                        this.obj6 = (global::Windows.UI.Xaml.Documents.Run)target;
                        break;
                    default:
                        break;
                }
            }

            public void DataContextChangedHandler(global::Windows.UI.Xaml.FrameworkElement sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args)
            {
                 global::MunchkinUWP.Model.Munchkin data = args.NewValue as global::MunchkinUWP.Model.Munchkin;
                 if (args.NewValue != null && data == null)
                 {
                    throw new global::System.ArgumentException("Incorrect type passed into template. Based on the x:DataType global::MunchkinUWP.Model.Munchkin was expected.");
                 }
                 this.SetDataRoot(data);
                 this.Update();
            }

            // IDataTemplateExtension

            public bool ProcessBinding(uint phase)
            {
                throw new global::System.NotImplementedException();
            }

            public int ProcessBindings(global::Windows.UI.Xaml.Controls.ContainerContentChangingEventArgs args)
            {
                int nextPhase = -1;
                switch(args.Phase)
                {
                    case 0:
                        nextPhase = -1;
                        this.SetDataRoot(args.Item as global::MunchkinUWP.Model.Munchkin);
                        if (!removedDataContextHandler)
                        {
                            removedDataContextHandler = true;
                            ((global::Windows.UI.Xaml.Controls.Grid)args.ItemContainer.ContentTemplateRoot).DataContextChanged -= this.DataContextChangedHandler;
                        }
                        this.initialized = true;
                        break;
                }
                this.Update_((global::MunchkinUWP.Model.Munchkin) args.Item, 1 << (int)args.Phase);
                return nextPhase;
            }

            public void ResetTemplate()
            {
                this.bindingsTracking.ReleaseAllListeners();
            }

            // IBattlePage_Bindings

            public void Initialize()
            {
                if (!this.initialized)
                {
                    this.Update();
                }
            }
            
            public void Update()
            {
                this.Update_(this.dataRoot, NOT_PHASED);
                this.initialized = true;
            }

            public void StopTracking()
            {
                this.bindingsTracking.ReleaseAllListeners();
                this.initialized = false;
            }

            // BattlePage_obj2_Bindings

            public void SetDataRoot(global::MunchkinUWP.Model.Munchkin newDataRoot)
            {
                this.bindingsTracking.ReleaseAllListeners();
                this.dataRoot = newDataRoot;
            }

            // Update methods for each path node used in binding steps.
            private void Update_(global::MunchkinUWP.Model.Munchkin obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_(obj);
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_strName(obj.strName, phase);
                        this.Update_nPower(obj.nPower, phase);
                        this.Update_nLevel(obj.nLevel, phase);
                        this.Update_nGear(obj.nGear, phase);
                    }
                }
            }
            private void Update_strName(global::System.String obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBlock_Text(this.obj3, obj, null);
                }
            }
            private void Update_nPower(global::System.Int32 obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_Documents_Run_Text(this.obj4, obj.ToString(), null);
                }
            }
            private void Update_nLevel(global::System.Int32 obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_Documents_Run_Text(this.obj5, obj.ToString(), null);
                }
            }
            private void Update_nGear(global::System.Int32 obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_Documents_Run_Text(this.obj6, obj.ToString(), null);
                }
            }

            private class BattlePage_obj2_BindingsTracking
            {
                global::System.WeakReference<BattlePage_obj2_Bindings> WeakRefToBindingObj; 

                public BattlePage_obj2_BindingsTracking(BattlePage_obj2_Bindings obj)
                {
                    WeakRefToBindingObj = new global::System.WeakReference<BattlePage_obj2_Bindings>(obj);
                }

                public void ReleaseAllListeners()
                {
                    UpdateChildListeners_(null);
                }

                public void PropertyChanged_(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    BattlePage_obj2_Bindings bindings;
                    if(WeakRefToBindingObj.TryGetTarget(out bindings))
                    {
                        string propName = e.PropertyName;
                        global::MunchkinUWP.Model.Munchkin obj = sender as global::MunchkinUWP.Model.Munchkin;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                            if (obj != null)
                            {
                                    bindings.Update_strName(obj.strName, DATA_CHANGED);
                                    bindings.Update_nPower(obj.nPower, DATA_CHANGED);
                                    bindings.Update_nLevel(obj.nLevel, DATA_CHANGED);
                                    bindings.Update_nGear(obj.nGear, DATA_CHANGED);
                            }
                        }
                        else
                        {
                            switch (propName)
                            {
                                case "strName":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_strName(obj.strName, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "nPower":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_nPower(obj.nPower, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "nLevel":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_nLevel(obj.nLevel, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "nGear":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_nGear(obj.nGear, DATA_CHANGED);
                                    }
                                    break;
                                }
                                default:
                                    break;
                            }
                        }
                    }
                }
                public void UpdateChildListeners_(global::MunchkinUWP.Model.Munchkin obj)
                {
                    BattlePage_obj2_Bindings bindings;
                    if(WeakRefToBindingObj.TryGetTarget(out bindings))
                    {
                        if (bindings.dataRoot != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)bindings.dataRoot).PropertyChanged -= PropertyChanged_;
                        }
                        if (obj != null)
                        {
                            bindings.dataRoot = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_;
                        }
                    }
                }
            }
        }

        private class BattlePage_obj1_Bindings :
            global::Windows.UI.Xaml.Markup.IComponentConnector,
            IBattlePage_Bindings
        {
            private global::MunchkinUWP.Pages.BattlePage dataRoot;
            private bool initialized = false;
            private const int NOT_PHASED = (1 << 31);
            private const int DATA_CHANGED = (1 << 30);
            private global::Windows.UI.Xaml.ResourceDictionary localResources;
            private global::System.WeakReference<global::Windows.UI.Xaml.FrameworkElement> converterLookupRoot;

            // Fields for each control that has bindings.
            private global::Windows.UI.Xaml.Controls.GridView obj22;
            private global::Windows.UI.Xaml.Controls.Primitives.ToggleButton obj24;
            private global::Windows.UI.Xaml.Controls.Primitives.ToggleButton obj25;
            private global::Windows.UI.Xaml.Controls.TextBlock obj40;
            private global::Windows.UI.Xaml.Controls.TextBlock obj41;
            private global::Windows.UI.Xaml.Documents.Run obj42;
            private global::Windows.UI.Xaml.Controls.ListView obj43;

            private BattlePage_obj1_BindingsTracking bindingsTracking;

            public BattlePage_obj1_Bindings()
            {
                this.bindingsTracking = new BattlePage_obj1_BindingsTracking(this);
            }

            // IComponentConnector

            public void Connect(int connectionId, global::System.Object target)
            {
                switch(connectionId)
                {
                    case 22:
                        this.obj22 = (global::Windows.UI.Xaml.Controls.GridView)target;
                        break;
                    case 24:
                        this.obj24 = (global::Windows.UI.Xaml.Controls.Primitives.ToggleButton)target;
                        (this.obj24).RegisterPropertyChangedCallback(global::Windows.UI.Xaml.Controls.Primitives.ToggleButton.IsCheckedProperty,
                            (global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DependencyProperty prop) =>
                            {
                                if (this.initialized)
                                {
                                    // Update Two Way binding
                                    this.dataRoot.ViewModel.bUseLevel = (this.obj24).IsChecked;
                                }
                            });
                        break;
                    case 25:
                        this.obj25 = (global::Windows.UI.Xaml.Controls.Primitives.ToggleButton)target;
                        (this.obj25).RegisterPropertyChangedCallback(global::Windows.UI.Xaml.Controls.Primitives.ToggleButton.IsCheckedProperty,
                            (global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DependencyProperty prop) =>
                            {
                                if (this.initialized)
                                {
                                    // Update Two Way binding
                                    this.dataRoot.ViewModel.bUseGear = (this.obj25).IsChecked;
                                }
                            });
                        break;
                    case 40:
                        this.obj40 = (global::Windows.UI.Xaml.Controls.TextBlock)target;
                        break;
                    case 41:
                        this.obj41 = (global::Windows.UI.Xaml.Controls.TextBlock)target;
                        break;
                    case 42:
                        this.obj42 = (global::Windows.UI.Xaml.Documents.Run)target;
                        break;
                    case 43:
                        this.obj43 = (global::Windows.UI.Xaml.Controls.ListView)target;
                        break;
                    default:
                        break;
                }
            }

            // IBattlePage_Bindings

            public void Initialize()
            {
                if (!this.initialized)
                {
                    this.Update();
                }
            }
            
            public void Update()
            {
                this.Update_(this.dataRoot, NOT_PHASED);
                this.initialized = true;
            }

            public void StopTracking()
            {
                this.bindingsTracking.ReleaseAllListeners();
                this.initialized = false;
            }

            // BattlePage_obj1_Bindings

            public void SetDataRoot(global::MunchkinUWP.Pages.BattlePage newDataRoot)
            {
                this.bindingsTracking.ReleaseAllListeners();
                this.dataRoot = newDataRoot;
            }

            public void Loading(global::Windows.UI.Xaml.FrameworkElement src, object data)
            {
                this.Initialize();
            }
            public void SetConverterLookupRoot(global::Windows.UI.Xaml.FrameworkElement rootElement)
            {
                this.converterLookupRoot = new global::System.WeakReference<global::Windows.UI.Xaml.FrameworkElement>(rootElement);
            }

            public global::Windows.UI.Xaml.Data.IValueConverter LookupConverter(string key)
            {
                if (this.localResources == null)
                {
                    global::Windows.UI.Xaml.FrameworkElement rootElement;
                    this.converterLookupRoot.TryGetTarget(out rootElement);
                    this.localResources = rootElement.Resources;
                    this.converterLookupRoot = null;
                }
                return (global::Windows.UI.Xaml.Data.IValueConverter) (this.localResources.ContainsKey(key) ? this.localResources[key] : global::Windows.UI.Xaml.Application.Current.Resources[key]);
            }

            // Update methods for each path node used in binding steps.
            private void Update_(global::MunchkinUWP.Pages.BattlePage obj, int phase)
            {
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_ViewModel(obj.ViewModel, phase);
                    }
                }
            }
            private void Update_ViewModel(global::MunchkinUWP.Model.Game obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_ViewModel(obj);
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_ViewModel_lstMunchkin(obj.lstMunchkin, phase);
                        this.Update_ViewModel_bUseLevel(obj.bUseLevel, phase);
                        this.Update_ViewModel_bUseGear(obj.bUseGear, phase);
                        this.Update_ViewModel_nMunchkinPower(obj.nMunchkinPower, phase);
                        this.Update_ViewModel_nMonsterPower(obj.nMonsterPower, phase);
                        this.Update_ViewModel_nMunchkinPowerMod(obj.nMunchkinPowerMod, phase);
                    }
                }
            }
            private void Update_ViewModel_lstMunchkin(global::System.Collections.ObjectModel.ObservableCollection<global::MunchkinUWP.Model.Munchkin> obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_ItemsControl_ItemsSource(this.obj22, obj, null);
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_ItemsControl_ItemsSource(this.obj43, obj, null);
                }
            }
            private void Update_ViewModel_bUseLevel(global::System.Nullable<global::System.Boolean> obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Primitives_ToggleButton_IsChecked(this.obj24, obj, null);
                }
            }
            private void Update_ViewModel_bUseGear(global::System.Nullable<global::System.Boolean> obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Primitives_ToggleButton_IsChecked(this.obj25, obj, null);
                }
            }
            private void Update_ViewModel_nMunchkinPower(global::System.Int32 obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBlock_Text(this.obj40, obj.ToString(), null);
                }
            }
            private void Update_ViewModel_nMonsterPower(global::System.Int32 obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBlock_Text(this.obj41, obj.ToString(), null);
                }
            }
            private void Update_ViewModel_nMunchkinPowerMod(global::System.Int32 obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_Documents_Run_Text(this.obj42, (global::System.String)this.LookupConverter("Texts").Convert(obj, typeof(global::System.String), "signedinteger", null), null);
                }
            }

            private class BattlePage_obj1_BindingsTracking
            {
                global::System.WeakReference<BattlePage_obj1_Bindings> WeakRefToBindingObj; 

                public BattlePage_obj1_BindingsTracking(BattlePage_obj1_Bindings obj)
                {
                    WeakRefToBindingObj = new global::System.WeakReference<BattlePage_obj1_Bindings>(obj);
                }

                public void ReleaseAllListeners()
                {
                    UpdateChildListeners_ViewModel(null);
                }

                public void PropertyChanged_ViewModel(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    BattlePage_obj1_Bindings bindings;
                    if(WeakRefToBindingObj.TryGetTarget(out bindings))
                    {
                        string propName = e.PropertyName;
                        global::MunchkinUWP.Model.Game obj = sender as global::MunchkinUWP.Model.Game;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                            if (obj != null)
                            {
                                    bindings.Update_ViewModel_lstMunchkin(obj.lstMunchkin, DATA_CHANGED);
                                    bindings.Update_ViewModel_bUseLevel(obj.bUseLevel, DATA_CHANGED);
                                    bindings.Update_ViewModel_bUseGear(obj.bUseGear, DATA_CHANGED);
                                    bindings.Update_ViewModel_nMunchkinPower(obj.nMunchkinPower, DATA_CHANGED);
                                    bindings.Update_ViewModel_nMonsterPower(obj.nMonsterPower, DATA_CHANGED);
                                    bindings.Update_ViewModel_nMunchkinPowerMod(obj.nMunchkinPowerMod, DATA_CHANGED);
                            }
                        }
                        else
                        {
                            switch (propName)
                            {
                                case "lstMunchkin":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_lstMunchkin(obj.lstMunchkin, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "bUseLevel":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_bUseLevel(obj.bUseLevel, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "bUseGear":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_bUseGear(obj.bUseGear, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "nMunchkinPower":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_nMunchkinPower(obj.nMunchkinPower, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "nMonsterPower":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_nMonsterPower(obj.nMonsterPower, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "nMunchkinPowerMod":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_nMunchkinPowerMod(obj.nMunchkinPowerMod, DATA_CHANGED);
                                    }
                                    break;
                                }
                                default:
                                    break;
                            }
                        }
                    }
                }
                private global::MunchkinUWP.Model.Game cache_ViewModel = null;
                public void UpdateChildListeners_ViewModel(global::MunchkinUWP.Model.Game obj)
                {
                    if (obj != cache_ViewModel)
                    {
                        if (cache_ViewModel != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)cache_ViewModel).PropertyChanged -= PropertyChanged_ViewModel;
                            cache_ViewModel = null;
                        }
                        if (obj != null)
                        {
                            cache_ViewModel = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_ViewModel;
                        }
                    }
                }
                public void PropertyChanged_ViewModel_lstMunchkin(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    BattlePage_obj1_Bindings bindings;
                    if(WeakRefToBindingObj.TryGetTarget(out bindings))
                    {
                        string propName = e.PropertyName;
                        global::System.Collections.ObjectModel.ObservableCollection<global::MunchkinUWP.Model.Munchkin> obj = sender as global::System.Collections.ObjectModel.ObservableCollection<global::MunchkinUWP.Model.Munchkin>;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                        }
                        else
                        {
                            switch (propName)
                            {
                                default:
                                    break;
                            }
                        }
                    }
                }
                public void CollectionChanged_ViewModel_lstMunchkin(object sender, global::System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
                {
                    BattlePage_obj1_Bindings bindings;
                    if(WeakRefToBindingObj.TryGetTarget(out bindings))
                    {
                        global::System.Collections.ObjectModel.ObservableCollection<global::MunchkinUWP.Model.Munchkin> obj = sender as global::System.Collections.ObjectModel.ObservableCollection<global::MunchkinUWP.Model.Munchkin>;
                    }
                }
            }
        }
        /// <summary>
        /// Connect()
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 14.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void Connect(int connectionId, object target)
        {
            switch(connectionId)
            {
            case 1:
                {
                    this.BattlePageRoot = (global::Windows.UI.Xaml.Controls.Page)(target);
                }
                break;
            case 7:
                {
                    this.MainGrid = (global::Windows.UI.Xaml.Controls.Grid)(target);
                }
                break;
            case 8:
                {
                    this.ReallySmallScreens = (global::Windows.UI.Xaml.VisualStateGroup)(target);
                }
                break;
            case 9:
                {
                    this.AdaptiveStates = (global::Windows.UI.Xaml.VisualStateGroup)(target);
                }
                break;
            case 10:
                {
                    this.DesktopState = (global::Windows.UI.Xaml.VisualState)(target);
                }
                break;
            case 11:
                {
                    this.MobileState = (global::Windows.UI.Xaml.VisualState)(target);
                }
                break;
            case 12:
                {
                    this.MultilineState = (global::Windows.UI.Xaml.VisualState)(target);
                }
                break;
            case 13:
                {
                    this.SinglelineState = (global::Windows.UI.Xaml.VisualState)(target);
                }
                break;
            case 14:
                {
                    this.BattleGrid = (global::Windows.UI.Xaml.Controls.Grid)(target);
                }
                break;
            case 15:
                {
                    this.CommandbarBattle = (global::Windows.UI.Xaml.Controls.CommandBar)(target);
                }
                break;
            case 16:
                {
                    this.BtnBack = (global::Windows.UI.Xaml.Controls.AppBarButton)(target);
                    #line 212 "..\..\..\..\UI\Pages\BattlePage.xaml"
                    ((global::Windows.UI.Xaml.Controls.AppBarButton)this.BtnBack).Click += this.GoBack;
                    #line default
                }
                break;
            case 17:
                {
                    this.BtnReset = (global::Windows.UI.Xaml.Controls.AppBarButton)(target);
                    #line 213 "..\..\..\..\UI\Pages\BattlePage.xaml"
                    ((global::Windows.UI.Xaml.Controls.AppBarButton)this.BtnReset).Click += this.BtnReset_Click;
                    #line default
                }
                break;
            case 18:
                {
                    this.BtnRandom2 = (global::Windows.UI.Xaml.Controls.AppBarButton)(target);
                    #line 214 "..\..\..\..\UI\Pages\BattlePage.xaml"
                    ((global::Windows.UI.Xaml.Controls.AppBarButton)this.BtnRandom2).Click += this.GoToRandom;
                    #line default
                }
                break;
            case 19:
                {
                    this.MunchkinRow = (global::Windows.UI.Xaml.Controls.RowDefinition)(target);
                }
                break;
            case 20:
                {
                    this.Strenghts1 = (global::Windows.UI.Xaml.Controls.RowDefinition)(target);
                }
                break;
            case 21:
                {
                    this.Strenghts3 = (global::Windows.UI.Xaml.Controls.RowDefinition)(target);
                }
                break;
            case 22:
                {
                    this.Munchkins = (global::Windows.UI.Xaml.Controls.GridView)(target);
                    #line 120 "..\..\..\..\UI\Pages\BattlePage.xaml"
                    ((global::Windows.UI.Xaml.Controls.GridView)this.Munchkins).Loaded += this.Munchkins_Loaded;
                    #line 121 "..\..\..\..\UI\Pages\BattlePage.xaml"
                    ((global::Windows.UI.Xaml.Controls.GridView)this.Munchkins).SelectionChanged += this.SelectionChanged;
                    #line default
                }
                break;
            case 23:
                {
                    this.BtnPlayer = (global::Windows.UI.Xaml.Controls.Button)(target);
                }
                break;
            case 26:
                {
                    this.BtnM = (global::Windows.UI.Xaml.Controls.Button)(target);
                    #line 172 "..\..\..\..\UI\Pages\BattlePage.xaml"
                    ((global::Windows.UI.Xaml.Controls.Button)this.BtnM).Click += this.BtnM_Click;
                    #line default
                }
                break;
            case 27:
                {
                    this.BtnL = (global::Windows.UI.Xaml.Controls.Button)(target);
                    #line 180 "..\..\..\..\UI\Pages\BattlePage.xaml"
                    ((global::Windows.UI.Xaml.Controls.Button)this.BtnL).Click += this.BtnL_Click;
                    #line default
                }
                break;
            case 28:
                {
                    this.MunchkinStrength = (global::Windows.UI.Xaml.Controls.Viewbox)(target);
                }
                break;
            case 29:
                {
                    this.Strength = (global::Windows.UI.Xaml.Controls.Viewbox)(target);
                }
                break;
            case 30:
                {
                    this.MonsterStrength = (global::Windows.UI.Xaml.Controls.Viewbox)(target);
                }
                break;
            case 31:
                {
                    this.MonsterPwrP1 = (global::Windows.UI.Xaml.Controls.Button)(target);
                    #line 200 "..\..\..\..\UI\Pages\BattlePage.xaml"
                    ((global::Windows.UI.Xaml.Controls.Button)this.MonsterPwrP1).Click += this.MonsterPwrP1_Click;
                    #line default
                }
                break;
            case 32:
                {
                    this.MonsterPwrP3 = (global::Windows.UI.Xaml.Controls.Button)(target);
                    #line 201 "..\..\..\..\UI\Pages\BattlePage.xaml"
                    ((global::Windows.UI.Xaml.Controls.Button)this.MonsterPwrP3).Click += this.MonsterPwrP3_Click;
                    #line default
                }
                break;
            case 33:
                {
                    this.MonsterPwrP5 = (global::Windows.UI.Xaml.Controls.Button)(target);
                    #line 202 "..\..\..\..\UI\Pages\BattlePage.xaml"
                    ((global::Windows.UI.Xaml.Controls.Button)this.MonsterPwrP5).Click += this.MonsterPwrP5_Click;
                    #line default
                }
                break;
            case 34:
                {
                    this.MonsterPwrP10 = (global::Windows.UI.Xaml.Controls.Button)(target);
                    #line 203 "..\..\..\..\UI\Pages\BattlePage.xaml"
                    ((global::Windows.UI.Xaml.Controls.Button)this.MonsterPwrP10).Click += this.MonsterPwrP10_Click;
                    #line default
                }
                break;
            case 35:
                {
                    this.MonsterPwrM1 = (global::Windows.UI.Xaml.Controls.Button)(target);
                    #line 204 "..\..\..\..\UI\Pages\BattlePage.xaml"
                    ((global::Windows.UI.Xaml.Controls.Button)this.MonsterPwrM1).Click += this.MonsterPwrM1_Click;
                    #line default
                }
                break;
            case 36:
                {
                    this.MonsterPwrM3 = (global::Windows.UI.Xaml.Controls.Button)(target);
                    #line 205 "..\..\..\..\UI\Pages\BattlePage.xaml"
                    ((global::Windows.UI.Xaml.Controls.Button)this.MonsterPwrM3).Click += this.MonsterPwrM3_Click;
                    #line default
                }
                break;
            case 37:
                {
                    this.MonsterPwrM5 = (global::Windows.UI.Xaml.Controls.Button)(target);
                    #line 206 "..\..\..\..\UI\Pages\BattlePage.xaml"
                    ((global::Windows.UI.Xaml.Controls.Button)this.MonsterPwrM5).Click += this.MonsterPwrM5_Click;
                    #line default
                }
                break;
            case 38:
                {
                    this.MonsterPwrM10 = (global::Windows.UI.Xaml.Controls.Button)(target);
                    #line 207 "..\..\..\..\UI\Pages\BattlePage.xaml"
                    ((global::Windows.UI.Xaml.Controls.Button)this.MonsterPwrM10).Click += this.MonsterPwrM10_Click;
                    #line default
                }
                break;
            case 39:
                {
                    this.MonsterName = (global::Windows.UI.Xaml.Controls.TextBlock)(target);
                }
                break;
            case 40:
                {
                    this.Munchkin_Power = (global::Windows.UI.Xaml.Controls.TextBlock)(target);
                    #line 191 "..\..\..\..\UI\Pages\BattlePage.xaml"
                    ((global::Windows.UI.Xaml.Controls.TextBlock)this.Munchkin_Power).Loaded += this.ChangeBattlePowerSizes;
                    #line default
                }
                break;
            case 41:
                {
                    this.Monster_Power = (global::Windows.UI.Xaml.Controls.TextBlock)(target);
                    #line 193 "..\..\..\..\UI\Pages\BattlePage.xaml"
                    ((global::Windows.UI.Xaml.Controls.TextBlock)this.Monster_Power).Loaded += this.ChangeBattlePowerSizes;
                    #line default
                }
                break;
            case 43:
                {
                    this.Munchkins2 = (global::Windows.UI.Xaml.Controls.ListView)(target);
                    #line 139 "..\..\..\..\UI\Pages\BattlePage.xaml"
                    ((global::Windows.UI.Xaml.Controls.ListView)this.Munchkins2).Loaded += this.Munchkins_Loaded;
                    #line 140 "..\..\..\..\UI\Pages\BattlePage.xaml"
                    ((global::Windows.UI.Xaml.Controls.ListView)this.Munchkins2).SelectionChanged += this.SelectionChanged;
                    #line default
                }
                break;
            default:
                break;
            }
            this._contentLoaded = true;
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 14.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::Windows.UI.Xaml.Markup.IComponentConnector GetBindingConnector(int connectionId, object target)
        {
            global::Windows.UI.Xaml.Markup.IComponentConnector returnValue = null;
            switch(connectionId)
            {
            case 1:
                {
                    global::Windows.UI.Xaml.Controls.Page element1 = (global::Windows.UI.Xaml.Controls.Page)target;
                    BattlePage_obj1_Bindings bindings = new BattlePage_obj1_Bindings();
                    returnValue = bindings;
                    bindings.SetDataRoot(this);
                    bindings.SetConverterLookupRoot(this);
                    this.Bindings = bindings;
                    element1.Loading += bindings.Loading;
                }
                break;
            case 2:
                {
                    global::Windows.UI.Xaml.Controls.Grid element2 = (global::Windows.UI.Xaml.Controls.Grid)target;
                    BattlePage_obj2_Bindings bindings = new BattlePage_obj2_Bindings();
                    returnValue = bindings;
                    bindings.SetDataRoot((global::MunchkinUWP.Model.Munchkin) element2.DataContext);
                    element2.DataContextChanged += bindings.DataContextChangedHandler;
                    global::Windows.UI.Xaml.DataTemplate.SetExtensionInstance(element2, bindings);
                }
                break;
            }
            return returnValue;
        }
    }
}

