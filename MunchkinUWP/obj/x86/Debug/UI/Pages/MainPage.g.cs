#pragma checksum "c:\Users\Tobiv\Source\Workspaces\MunchkinApp\MunchkinUWP\UI\Pages\MainPage.xaml" "{406ea660-64cf-4c82-b6f0-42d48172a799}" "311A229E1409A2B370C63207EEA91919"
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MunchkinUWP.Pages
{
    partial class MainPage : 
        global::Windows.UI.Xaml.Controls.Page, 
        global::Windows.UI.Xaml.Markup.IComponentConnector,
        global::Windows.UI.Xaml.Markup.IComponentConnector2
    {
        internal class XamlBindingSetters
        {
            public static void Set_Windows_UI_Xaml_Controls_ItemsControl_ItemsSource(global::Windows.UI.Xaml.Controls.ItemsControl obj, global::System.Object value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Object) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Object), targetNullValue);
                }
                obj.ItemsSource = value;
            }
            public static void Set_Windows_UI_Xaml_Controls_Primitives_Selector_SelectedItem(global::Windows.UI.Xaml.Controls.Primitives.Selector obj, global::System.Object value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Object) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Object), targetNullValue);
                }
                obj.SelectedItem = value;
            }
            public static void Set_Windows_UI_Xaml_Controls_Pivot_SelectedItem(global::Windows.UI.Xaml.Controls.Pivot obj, global::System.Object value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Object) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Object), targetNullValue);
                }
                obj.SelectedItem = value;
            }
            public static void Set_Windows_UI_Xaml_Controls_TextBox_Text(global::Windows.UI.Xaml.Controls.TextBox obj, global::System.String value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = targetNullValue;
                }
                obj.Text = value ?? global::System.String.Empty;
            }
            public static void Set_Windows_UI_Xaml_Controls_TextBlock_Text(global::Windows.UI.Xaml.Controls.TextBlock obj, global::System.String value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = targetNullValue;
                }
                obj.Text = value ?? global::System.String.Empty;
            }
            public static void Set_Windows_UI_Xaml_Documents_Run_Text(global::Windows.UI.Xaml.Documents.Run obj, global::System.String value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = targetNullValue;
                }
                obj.Text = value ?? global::System.String.Empty;
            }
            public static void Set_Windows_UI_Xaml_UIElement_Visibility(global::Windows.UI.Xaml.UIElement obj, global::Windows.UI.Xaml.Visibility value)
            {
                obj.Visibility = value;
            }
        };

        private class MainPage_obj9_Bindings :
            global::Windows.UI.Xaml.IDataTemplateExtension,
            global::Windows.UI.Xaml.Markup.IComponentConnector,
            IMainPage_Bindings
        {
            private global::MunchkinUWP.Model.Munchkin dataRoot;
            private bool initialized = false;
            private const int NOT_PHASED = (1 << 31);
            private const int DATA_CHANGED = (1 << 30);
            private bool removedDataContextHandler = false;

            // Fields for each control that has bindings.
            private global::Windows.UI.Xaml.Controls.TextBox obj10;

            private MainPage_obj9_BindingsTracking bindingsTracking;

            public MainPage_obj9_Bindings()
            {
                this.bindingsTracking = new MainPage_obj9_BindingsTracking(this);
            }

            // IComponentConnector

            public void Connect(int connectionId, global::System.Object target)
            {
                switch(connectionId)
                {
                    case 10:
                        this.obj10 = (global::Windows.UI.Xaml.Controls.TextBox)target;
                        (this.obj10).LostFocus += (global::System.Object sender, global::Windows.UI.Xaml.RoutedEventArgs e) =>
                            {
                                if (this.initialized)
                                {
                                    // Update Two Way binding
                                    this.dataRoot.strName = (this.obj10).Text;
                                }
                            };
                        break;
                    default:
                        break;
                }
            }

            public void DataContextChangedHandler(global::Windows.UI.Xaml.FrameworkElement sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args)
            {
                 global::MunchkinUWP.Model.Munchkin data = args.NewValue as global::MunchkinUWP.Model.Munchkin;
                 if (args.NewValue != null && data == null)
                 {
                    throw new global::System.ArgumentException("Incorrect type passed into template. Based on the x:DataType global::MunchkinUWP.Model.Munchkin was expected.");
                 }
                 this.SetDataRoot(data);
                 this.Update();
            }

            // IDataTemplateExtension

            public bool ProcessBinding(uint phase)
            {
                throw new global::System.NotImplementedException();
            }

            public int ProcessBindings(global::Windows.UI.Xaml.Controls.ContainerContentChangingEventArgs args)
            {
                int nextPhase = -1;
                switch(args.Phase)
                {
                    case 0:
                        nextPhase = -1;
                        this.SetDataRoot(args.Item as global::MunchkinUWP.Model.Munchkin);
                        if (!removedDataContextHandler)
                        {
                            removedDataContextHandler = true;
                            ((global::Windows.UI.Xaml.Controls.Grid)args.ItemContainer.ContentTemplateRoot).DataContextChanged -= this.DataContextChangedHandler;
                        }
                        this.initialized = true;
                        break;
                }
                this.Update_((global::MunchkinUWP.Model.Munchkin) args.Item, 1 << (int)args.Phase);
                return nextPhase;
            }

            public void ResetTemplate()
            {
                this.bindingsTracking.ReleaseAllListeners();
            }

            // IMainPage_Bindings

            public void Initialize()
            {
                if (!this.initialized)
                {
                    this.Update();
                }
            }
            
            public void Update()
            {
                this.Update_(this.dataRoot, NOT_PHASED);
                this.initialized = true;
            }

            public void StopTracking()
            {
                this.bindingsTracking.ReleaseAllListeners();
                this.initialized = false;
            }

            // MainPage_obj9_Bindings

            public void SetDataRoot(global::MunchkinUWP.Model.Munchkin newDataRoot)
            {
                this.bindingsTracking.ReleaseAllListeners();
                this.dataRoot = newDataRoot;
            }

            // Update methods for each path node used in binding steps.
            private void Update_(global::MunchkinUWP.Model.Munchkin obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_(obj);
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_strName(obj.strName, phase);
                    }
                }
            }
            private void Update_strName(global::System.String obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBox_Text(this.obj10, obj, null);
                }
            }

            private class MainPage_obj9_BindingsTracking
            {
                global::System.WeakReference<MainPage_obj9_Bindings> WeakRefToBindingObj; 

                public MainPage_obj9_BindingsTracking(MainPage_obj9_Bindings obj)
                {
                    WeakRefToBindingObj = new global::System.WeakReference<MainPage_obj9_Bindings>(obj);
                }

                public void ReleaseAllListeners()
                {
                    UpdateChildListeners_(null);
                }

                public void PropertyChanged_(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    MainPage_obj9_Bindings bindings;
                    if(WeakRefToBindingObj.TryGetTarget(out bindings))
                    {
                        string propName = e.PropertyName;
                        global::MunchkinUWP.Model.Munchkin obj = sender as global::MunchkinUWP.Model.Munchkin;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                            if (obj != null)
                            {
                                    bindings.Update_strName(obj.strName, DATA_CHANGED);
                            }
                        }
                        else
                        {
                            switch (propName)
                            {
                                case "strName":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_strName(obj.strName, DATA_CHANGED);
                                    }
                                    break;
                                }
                                default:
                                    break;
                            }
                        }
                    }
                }
                public void UpdateChildListeners_(global::MunchkinUWP.Model.Munchkin obj)
                {
                    MainPage_obj9_Bindings bindings;
                    if(WeakRefToBindingObj.TryGetTarget(out bindings))
                    {
                        if (bindings.dataRoot != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)bindings.dataRoot).PropertyChanged -= PropertyChanged_;
                        }
                        if (obj != null)
                        {
                            bindings.dataRoot = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_;
                        }
                    }
                }
            }
        }

        private class MainPage_obj12_Bindings :
            global::Windows.UI.Xaml.IDataTemplateExtension,
            global::Windows.UI.Xaml.Markup.IComponentConnector,
            IMainPage_Bindings
        {
            private global::MunchkinUWP.Model.Munchkin dataRoot;
            private bool initialized = false;
            private const int NOT_PHASED = (1 << 31);
            private const int DATA_CHANGED = (1 << 30);
            private bool removedDataContextHandler = false;

            // Fields for each control that has bindings.
            private global::Windows.UI.Xaml.Controls.TextBlock obj13;
            private global::Windows.UI.Xaml.Documents.Run obj14;
            private global::Windows.UI.Xaml.Documents.Run obj15;
            private global::Windows.UI.Xaml.Documents.Run obj16;

            private MainPage_obj12_BindingsTracking bindingsTracking;

            public MainPage_obj12_Bindings()
            {
                this.bindingsTracking = new MainPage_obj12_BindingsTracking(this);
            }

            // IComponentConnector

            public void Connect(int connectionId, global::System.Object target)
            {
                switch(connectionId)
                {
                    case 13:
                        this.obj13 = (global::Windows.UI.Xaml.Controls.TextBlock)target;
                        break;
                    case 14:
                        this.obj14 = (global::Windows.UI.Xaml.Documents.Run)target;
                        break;
                    case 15:
                        this.obj15 = (global::Windows.UI.Xaml.Documents.Run)target;
                        break;
                    case 16:
                        this.obj16 = (global::Windows.UI.Xaml.Documents.Run)target;
                        break;
                    default:
                        break;
                }
            }

            public void DataContextChangedHandler(global::Windows.UI.Xaml.FrameworkElement sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args)
            {
                 global::MunchkinUWP.Model.Munchkin data = args.NewValue as global::MunchkinUWP.Model.Munchkin;
                 if (args.NewValue != null && data == null)
                 {
                    throw new global::System.ArgumentException("Incorrect type passed into template. Based on the x:DataType global::MunchkinUWP.Model.Munchkin was expected.");
                 }
                 this.SetDataRoot(data);
                 this.Update();
            }

            // IDataTemplateExtension

            public bool ProcessBinding(uint phase)
            {
                throw new global::System.NotImplementedException();
            }

            public int ProcessBindings(global::Windows.UI.Xaml.Controls.ContainerContentChangingEventArgs args)
            {
                int nextPhase = -1;
                switch(args.Phase)
                {
                    case 0:
                        nextPhase = -1;
                        this.SetDataRoot(args.Item as global::MunchkinUWP.Model.Munchkin);
                        if (!removedDataContextHandler)
                        {
                            removedDataContextHandler = true;
                            ((global::Windows.UI.Xaml.Controls.Grid)args.ItemContainer.ContentTemplateRoot).DataContextChanged -= this.DataContextChangedHandler;
                        }
                        this.initialized = true;
                        break;
                }
                this.Update_((global::MunchkinUWP.Model.Munchkin) args.Item, 1 << (int)args.Phase);
                return nextPhase;
            }

            public void ResetTemplate()
            {
                this.bindingsTracking.ReleaseAllListeners();
            }

            // IMainPage_Bindings

            public void Initialize()
            {
                if (!this.initialized)
                {
                    this.Update();
                }
            }
            
            public void Update()
            {
                this.Update_(this.dataRoot, NOT_PHASED);
                this.initialized = true;
            }

            public void StopTracking()
            {
                this.bindingsTracking.ReleaseAllListeners();
                this.initialized = false;
            }

            // MainPage_obj12_Bindings

            public void SetDataRoot(global::MunchkinUWP.Model.Munchkin newDataRoot)
            {
                this.bindingsTracking.ReleaseAllListeners();
                this.dataRoot = newDataRoot;
            }

            // Update methods for each path node used in binding steps.
            private void Update_(global::MunchkinUWP.Model.Munchkin obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_(obj);
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_strName(obj.strName, phase);
                        this.Update_nPower(obj.nPower, phase);
                        this.Update_nLevel(obj.nLevel, phase);
                        this.Update_nGear(obj.nGear, phase);
                    }
                }
            }
            private void Update_strName(global::System.String obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBlock_Text(this.obj13, obj, null);
                }
            }
            private void Update_nPower(global::System.Int32 obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_Documents_Run_Text(this.obj14, obj.ToString(), null);
                }
            }
            private void Update_nLevel(global::System.Int32 obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_Documents_Run_Text(this.obj15, obj.ToString(), null);
                }
            }
            private void Update_nGear(global::System.Int32 obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_Documents_Run_Text(this.obj16, obj.ToString(), null);
                }
            }

            private class MainPage_obj12_BindingsTracking
            {
                global::System.WeakReference<MainPage_obj12_Bindings> WeakRefToBindingObj; 

                public MainPage_obj12_BindingsTracking(MainPage_obj12_Bindings obj)
                {
                    WeakRefToBindingObj = new global::System.WeakReference<MainPage_obj12_Bindings>(obj);
                }

                public void ReleaseAllListeners()
                {
                    UpdateChildListeners_(null);
                }

                public void PropertyChanged_(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    MainPage_obj12_Bindings bindings;
                    if(WeakRefToBindingObj.TryGetTarget(out bindings))
                    {
                        string propName = e.PropertyName;
                        global::MunchkinUWP.Model.Munchkin obj = sender as global::MunchkinUWP.Model.Munchkin;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                            if (obj != null)
                            {
                                    bindings.Update_strName(obj.strName, DATA_CHANGED);
                                    bindings.Update_nPower(obj.nPower, DATA_CHANGED);
                                    bindings.Update_nLevel(obj.nLevel, DATA_CHANGED);
                                    bindings.Update_nGear(obj.nGear, DATA_CHANGED);
                            }
                        }
                        else
                        {
                            switch (propName)
                            {
                                case "strName":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_strName(obj.strName, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "nPower":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_nPower(obj.nPower, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "nLevel":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_nLevel(obj.nLevel, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "nGear":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_nGear(obj.nGear, DATA_CHANGED);
                                    }
                                    break;
                                }
                                default:
                                    break;
                            }
                        }
                    }
                }
                public void UpdateChildListeners_(global::MunchkinUWP.Model.Munchkin obj)
                {
                    MainPage_obj12_Bindings bindings;
                    if(WeakRefToBindingObj.TryGetTarget(out bindings))
                    {
                        if (bindings.dataRoot != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)bindings.dataRoot).PropertyChanged -= PropertyChanged_;
                        }
                        if (obj != null)
                        {
                            bindings.dataRoot = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_;
                        }
                    }
                }
            }
        }

        private class MainPage_obj17_Bindings :
            global::Windows.UI.Xaml.IDataTemplateExtension,
            global::Windows.UI.Xaml.Markup.IComponentConnector,
            IMainPage_Bindings
        {
            private global::MunchkinUWP.Model.Munchkin dataRoot;
            private bool initialized = false;
            private const int NOT_PHASED = (1 << 31);
            private const int DATA_CHANGED = (1 << 30);
            private bool removedDataContextHandler = false;

            // Fields for each control that has bindings.
            private global::Windows.UI.Xaml.Controls.TextBlock obj18;
            private global::Windows.UI.Xaml.Documents.Run obj19;
            private global::Windows.UI.Xaml.Documents.Run obj20;

            private MainPage_obj17_BindingsTracking bindingsTracking;

            public MainPage_obj17_Bindings()
            {
                this.bindingsTracking = new MainPage_obj17_BindingsTracking(this);
            }

            // IComponentConnector

            public void Connect(int connectionId, global::System.Object target)
            {
                switch(connectionId)
                {
                    case 18:
                        this.obj18 = (global::Windows.UI.Xaml.Controls.TextBlock)target;
                        break;
                    case 19:
                        this.obj19 = (global::Windows.UI.Xaml.Documents.Run)target;
                        break;
                    case 20:
                        this.obj20 = (global::Windows.UI.Xaml.Documents.Run)target;
                        break;
                    default:
                        break;
                }
            }

            public void DataContextChangedHandler(global::Windows.UI.Xaml.FrameworkElement sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args)
            {
                 global::MunchkinUWP.Model.Munchkin data = args.NewValue as global::MunchkinUWP.Model.Munchkin;
                 if (args.NewValue != null && data == null)
                 {
                    throw new global::System.ArgumentException("Incorrect type passed into template. Based on the x:DataType global::MunchkinUWP.Model.Munchkin was expected.");
                 }
                 this.SetDataRoot(data);
                 this.Update();
            }

            // IDataTemplateExtension

            public bool ProcessBinding(uint phase)
            {
                throw new global::System.NotImplementedException();
            }

            public int ProcessBindings(global::Windows.UI.Xaml.Controls.ContainerContentChangingEventArgs args)
            {
                int nextPhase = -1;
                switch(args.Phase)
                {
                    case 0:
                        nextPhase = -1;
                        this.SetDataRoot(args.Item as global::MunchkinUWP.Model.Munchkin);
                        if (!removedDataContextHandler)
                        {
                            removedDataContextHandler = true;
                            ((global::Windows.UI.Xaml.Controls.Grid)args.ItemContainer.ContentTemplateRoot).DataContextChanged -= this.DataContextChangedHandler;
                        }
                        this.initialized = true;
                        break;
                }
                this.Update_((global::MunchkinUWP.Model.Munchkin) args.Item, 1 << (int)args.Phase);
                return nextPhase;
            }

            public void ResetTemplate()
            {
                this.bindingsTracking.ReleaseAllListeners();
            }

            // IMainPage_Bindings

            public void Initialize()
            {
                if (!this.initialized)
                {
                    this.Update();
                }
            }
            
            public void Update()
            {
                this.Update_(this.dataRoot, NOT_PHASED);
                this.initialized = true;
            }

            public void StopTracking()
            {
                this.bindingsTracking.ReleaseAllListeners();
                this.initialized = false;
            }

            // MainPage_obj17_Bindings

            public void SetDataRoot(global::MunchkinUWP.Model.Munchkin newDataRoot)
            {
                this.bindingsTracking.ReleaseAllListeners();
                this.dataRoot = newDataRoot;
            }

            // Update methods for each path node used in binding steps.
            private void Update_(global::MunchkinUWP.Model.Munchkin obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_(obj);
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_strName(obj.strName, phase);
                        this.Update_nPower(obj.nPower, phase);
                        this.Update_nLevel(obj.nLevel, phase);
                    }
                }
            }
            private void Update_strName(global::System.String obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBlock_Text(this.obj18, obj, null);
                }
            }
            private void Update_nPower(global::System.Int32 obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_Documents_Run_Text(this.obj19, obj.ToString(), null);
                }
            }
            private void Update_nLevel(global::System.Int32 obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_Documents_Run_Text(this.obj20, obj.ToString(), null);
                }
            }

            private class MainPage_obj17_BindingsTracking
            {
                global::System.WeakReference<MainPage_obj17_Bindings> WeakRefToBindingObj; 

                public MainPage_obj17_BindingsTracking(MainPage_obj17_Bindings obj)
                {
                    WeakRefToBindingObj = new global::System.WeakReference<MainPage_obj17_Bindings>(obj);
                }

                public void ReleaseAllListeners()
                {
                    UpdateChildListeners_(null);
                }

                public void PropertyChanged_(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    MainPage_obj17_Bindings bindings;
                    if(WeakRefToBindingObj.TryGetTarget(out bindings))
                    {
                        string propName = e.PropertyName;
                        global::MunchkinUWP.Model.Munchkin obj = sender as global::MunchkinUWP.Model.Munchkin;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                            if (obj != null)
                            {
                                    bindings.Update_strName(obj.strName, DATA_CHANGED);
                                    bindings.Update_nPower(obj.nPower, DATA_CHANGED);
                                    bindings.Update_nLevel(obj.nLevel, DATA_CHANGED);
                            }
                        }
                        else
                        {
                            switch (propName)
                            {
                                case "strName":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_strName(obj.strName, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "nPower":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_nPower(obj.nPower, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "nLevel":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_nLevel(obj.nLevel, DATA_CHANGED);
                                    }
                                    break;
                                }
                                default:
                                    break;
                            }
                        }
                    }
                }
                public void UpdateChildListeners_(global::MunchkinUWP.Model.Munchkin obj)
                {
                    MainPage_obj17_Bindings bindings;
                    if(WeakRefToBindingObj.TryGetTarget(out bindings))
                    {
                        if (bindings.dataRoot != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)bindings.dataRoot).PropertyChanged -= PropertyChanged_;
                        }
                        if (obj != null)
                        {
                            bindings.dataRoot = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_;
                        }
                    }
                }
            }
        }

        private class MainPage_obj21_Bindings :
            global::Windows.UI.Xaml.IDataTemplateExtension,
            global::Windows.UI.Xaml.Markup.IComponentConnector,
            IMainPage_Bindings
        {
            private global::MunchkinUWP.Model.Munchkin dataRoot;
            private bool initialized = false;
            private const int NOT_PHASED = (1 << 31);
            private const int DATA_CHANGED = (1 << 30);
            private global::Windows.UI.Xaml.ResourceDictionary localResources;
            private global::System.WeakReference<global::Windows.UI.Xaml.FrameworkElement> converterLookupRoot;
            private bool removedDataContextHandler = false;

            // Fields for each control that has bindings.
            private global::Windows.UI.Xaml.Controls.TextBlock obj22;
            private global::Windows.UI.Xaml.Documents.Run obj27;
            private global::Windows.UI.Xaml.Documents.Run obj28;
            private global::Windows.UI.Xaml.Documents.Run obj30;
            private global::Windows.UI.Xaml.Controls.SymbolIcon obj31;

            private MainPage_obj21_BindingsTracking bindingsTracking;

            public MainPage_obj21_Bindings()
            {
                this.bindingsTracking = new MainPage_obj21_BindingsTracking(this);
            }

            // IComponentConnector

            public void Connect(int connectionId, global::System.Object target)
            {
                switch(connectionId)
                {
                    case 22:
                        this.obj22 = (global::Windows.UI.Xaml.Controls.TextBlock)target;
                        break;
                    case 27:
                        this.obj27 = (global::Windows.UI.Xaml.Documents.Run)target;
                        break;
                    case 28:
                        this.obj28 = (global::Windows.UI.Xaml.Documents.Run)target;
                        break;
                    case 30:
                        this.obj30 = (global::Windows.UI.Xaml.Documents.Run)target;
                        break;
                    case 31:
                        this.obj31 = (global::Windows.UI.Xaml.Controls.SymbolIcon)target;
                        break;
                    default:
                        break;
                }
            }

            public void DataContextChangedHandler(global::Windows.UI.Xaml.FrameworkElement sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args)
            {
                 global::MunchkinUWP.Model.Munchkin data = args.NewValue as global::MunchkinUWP.Model.Munchkin;
                 if (args.NewValue != null && data == null)
                 {
                    throw new global::System.ArgumentException("Incorrect type passed into template. Based on the x:DataType global::MunchkinUWP.Model.Munchkin was expected.");
                 }
                 this.SetDataRoot(data);
                 this.Update();
            }

            // IDataTemplateExtension

            public bool ProcessBinding(uint phase)
            {
                throw new global::System.NotImplementedException();
            }

            public int ProcessBindings(global::Windows.UI.Xaml.Controls.ContainerContentChangingEventArgs args)
            {
                int nextPhase = -1;
                switch(args.Phase)
                {
                    case 0:
                        nextPhase = -1;
                        this.SetDataRoot(args.Item as global::MunchkinUWP.Model.Munchkin);
                        if (!removedDataContextHandler)
                        {
                            removedDataContextHandler = true;
                            ((global::Windows.UI.Xaml.Controls.Grid)args.ItemContainer.ContentTemplateRoot).DataContextChanged -= this.DataContextChangedHandler;
                        }
                        this.initialized = true;
                        break;
                }
                this.Update_((global::MunchkinUWP.Model.Munchkin) args.Item, 1 << (int)args.Phase);
                return nextPhase;
            }

            public void ResetTemplate()
            {
                this.bindingsTracking.ReleaseAllListeners();
            }

            // IMainPage_Bindings

            public void Initialize()
            {
                if (!this.initialized)
                {
                    this.Update();
                }
            }
            
            public void Update()
            {
                this.Update_(this.dataRoot, NOT_PHASED);
                this.initialized = true;
            }

            public void StopTracking()
            {
                this.bindingsTracking.ReleaseAllListeners();
                this.initialized = false;
            }

            // MainPage_obj21_Bindings

            public void SetDataRoot(global::MunchkinUWP.Model.Munchkin newDataRoot)
            {
                this.bindingsTracking.ReleaseAllListeners();
                this.dataRoot = newDataRoot;
            }
            public void SetConverterLookupRoot(global::Windows.UI.Xaml.FrameworkElement rootElement)
            {
                this.converterLookupRoot = new global::System.WeakReference<global::Windows.UI.Xaml.FrameworkElement>(rootElement);
            }

            public global::Windows.UI.Xaml.Data.IValueConverter LookupConverter(string key)
            {
                if (this.localResources == null)
                {
                    global::Windows.UI.Xaml.FrameworkElement rootElement;
                    this.converterLookupRoot.TryGetTarget(out rootElement);
                    this.localResources = rootElement.Resources;
                    this.converterLookupRoot = null;
                }
                return (global::Windows.UI.Xaml.Data.IValueConverter) (this.localResources.ContainsKey(key) ? this.localResources[key] : global::Windows.UI.Xaml.Application.Current.Resources[key]);
            }

            // Update methods for each path node used in binding steps.
            private void Update_(global::MunchkinUWP.Model.Munchkin obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_(obj);
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_strName(obj.strName, phase);
                        this.Update_nLevel(obj.nLevel, phase);
                        this.Update_nGear(obj.nGear, phase);
                        this.Update_nPower(obj.nPower, phase);
                        this.Update_bHasWon(obj.bHasWon, phase);
                    }
                }
            }
            private void Update_strName(global::System.String obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBlock_Text(this.obj22, obj, null);
                }
            }
            private void Update_nLevel(global::System.Int32 obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_Documents_Run_Text(this.obj27, obj.ToString(), null);
                }
            }
            private void Update_nGear(global::System.Int32 obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_Documents_Run_Text(this.obj28, obj.ToString(), null);
                }
            }
            private void Update_nPower(global::System.Int32 obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_Documents_Run_Text(this.obj30, obj.ToString(), null);
                }
            }
            private void Update_bHasWon(global::System.Boolean obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_UIElement_Visibility(this.obj31, (global::Windows.UI.Xaml.Visibility)this.LookupConverter("io_Bool").Convert(obj, typeof(global::Windows.UI.Xaml.Visibility), "Visibility", null));
                }
            }

            private class MainPage_obj21_BindingsTracking
            {
                global::System.WeakReference<MainPage_obj21_Bindings> WeakRefToBindingObj; 

                public MainPage_obj21_BindingsTracking(MainPage_obj21_Bindings obj)
                {
                    WeakRefToBindingObj = new global::System.WeakReference<MainPage_obj21_Bindings>(obj);
                }

                public void ReleaseAllListeners()
                {
                    UpdateChildListeners_(null);
                }

                public void PropertyChanged_(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    MainPage_obj21_Bindings bindings;
                    if(WeakRefToBindingObj.TryGetTarget(out bindings))
                    {
                        string propName = e.PropertyName;
                        global::MunchkinUWP.Model.Munchkin obj = sender as global::MunchkinUWP.Model.Munchkin;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                            if (obj != null)
                            {
                                    bindings.Update_strName(obj.strName, DATA_CHANGED);
                                    bindings.Update_nLevel(obj.nLevel, DATA_CHANGED);
                                    bindings.Update_nGear(obj.nGear, DATA_CHANGED);
                                    bindings.Update_nPower(obj.nPower, DATA_CHANGED);
                                    bindings.Update_bHasWon(obj.bHasWon, DATA_CHANGED);
                            }
                        }
                        else
                        {
                            switch (propName)
                            {
                                case "strName":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_strName(obj.strName, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "nLevel":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_nLevel(obj.nLevel, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "nGear":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_nGear(obj.nGear, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "nPower":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_nPower(obj.nPower, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "bHasWon":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_bHasWon(obj.bHasWon, DATA_CHANGED);
                                    }
                                    break;
                                }
                                default:
                                    break;
                            }
                        }
                    }
                }
                public void UpdateChildListeners_(global::MunchkinUWP.Model.Munchkin obj)
                {
                    MainPage_obj21_Bindings bindings;
                    if(WeakRefToBindingObj.TryGetTarget(out bindings))
                    {
                        if (bindings.dataRoot != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)bindings.dataRoot).PropertyChanged -= PropertyChanged_;
                        }
                        if (obj != null)
                        {
                            bindings.dataRoot = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_;
                        }
                    }
                }
            }
        }

        private class MainPage_obj32_Bindings :
            global::Windows.UI.Xaml.IDataTemplateExtension,
            global::Windows.UI.Xaml.Markup.IComponentConnector,
            IMainPage_Bindings
        {
            private global::MunchkinUWP.Model.Munchkin dataRoot;
            private bool initialized = false;
            private const int NOT_PHASED = (1 << 31);
            private const int DATA_CHANGED = (1 << 30);
            private bool removedDataContextHandler = false;

            // Fields for each control that has bindings.
            private global::Windows.UI.Xaml.Documents.Run obj33;
            private global::Windows.UI.Xaml.Documents.Run obj34;
            private global::Windows.UI.Xaml.Documents.Run obj35;

            private MainPage_obj32_BindingsTracking bindingsTracking;

            public MainPage_obj32_Bindings()
            {
                this.bindingsTracking = new MainPage_obj32_BindingsTracking(this);
            }

            // IComponentConnector

            public void Connect(int connectionId, global::System.Object target)
            {
                switch(connectionId)
                {
                    case 33:
                        this.obj33 = (global::Windows.UI.Xaml.Documents.Run)target;
                        break;
                    case 34:
                        this.obj34 = (global::Windows.UI.Xaml.Documents.Run)target;
                        break;
                    case 35:
                        this.obj35 = (global::Windows.UI.Xaml.Documents.Run)target;
                        break;
                    default:
                        break;
                }
            }

            public void DataContextChangedHandler(global::Windows.UI.Xaml.FrameworkElement sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args)
            {
                 global::MunchkinUWP.Model.Munchkin data = args.NewValue as global::MunchkinUWP.Model.Munchkin;
                 if (args.NewValue != null && data == null)
                 {
                    throw new global::System.ArgumentException("Incorrect type passed into template. Based on the x:DataType global::MunchkinUWP.Model.Munchkin was expected.");
                 }
                 this.SetDataRoot(data);
                 this.Update();
            }

            // IDataTemplateExtension

            public bool ProcessBinding(uint phase)
            {
                throw new global::System.NotImplementedException();
            }

            public int ProcessBindings(global::Windows.UI.Xaml.Controls.ContainerContentChangingEventArgs args)
            {
                int nextPhase = -1;
                switch(args.Phase)
                {
                    case 0:
                        nextPhase = -1;
                        this.SetDataRoot(args.Item as global::MunchkinUWP.Model.Munchkin);
                        if (!removedDataContextHandler)
                        {
                            removedDataContextHandler = true;
                            ((global::Windows.UI.Xaml.Controls.Grid)args.ItemContainer.ContentTemplateRoot).DataContextChanged -= this.DataContextChangedHandler;
                        }
                        this.initialized = true;
                        break;
                }
                this.Update_((global::MunchkinUWP.Model.Munchkin) args.Item, 1 << (int)args.Phase);
                return nextPhase;
            }

            public void ResetTemplate()
            {
                this.bindingsTracking.ReleaseAllListeners();
            }

            // IMainPage_Bindings

            public void Initialize()
            {
                if (!this.initialized)
                {
                    this.Update();
                }
            }
            
            public void Update()
            {
                this.Update_(this.dataRoot, NOT_PHASED);
                this.initialized = true;
            }

            public void StopTracking()
            {
                this.bindingsTracking.ReleaseAllListeners();
                this.initialized = false;
            }

            // MainPage_obj32_Bindings

            public void SetDataRoot(global::MunchkinUWP.Model.Munchkin newDataRoot)
            {
                this.bindingsTracking.ReleaseAllListeners();
                this.dataRoot = newDataRoot;
            }

            // Update methods for each path node used in binding steps.
            private void Update_(global::MunchkinUWP.Model.Munchkin obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_(obj);
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_nLevel(obj.nLevel, phase);
                        this.Update_strName(obj.strName, phase);
                        this.Update_nPower(obj.nPower, phase);
                    }
                }
            }
            private void Update_nLevel(global::System.Int32 obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_Documents_Run_Text(this.obj33, obj.ToString(), null);
                }
            }
            private void Update_strName(global::System.String obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_Documents_Run_Text(this.obj34, obj, null);
                }
            }
            private void Update_nPower(global::System.Int32 obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_Documents_Run_Text(this.obj35, obj.ToString(), null);
                }
            }

            private class MainPage_obj32_BindingsTracking
            {
                global::System.WeakReference<MainPage_obj32_Bindings> WeakRefToBindingObj; 

                public MainPage_obj32_BindingsTracking(MainPage_obj32_Bindings obj)
                {
                    WeakRefToBindingObj = new global::System.WeakReference<MainPage_obj32_Bindings>(obj);
                }

                public void ReleaseAllListeners()
                {
                    UpdateChildListeners_(null);
                }

                public void PropertyChanged_(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    MainPage_obj32_Bindings bindings;
                    if(WeakRefToBindingObj.TryGetTarget(out bindings))
                    {
                        string propName = e.PropertyName;
                        global::MunchkinUWP.Model.Munchkin obj = sender as global::MunchkinUWP.Model.Munchkin;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                            if (obj != null)
                            {
                                    bindings.Update_nLevel(obj.nLevel, DATA_CHANGED);
                                    bindings.Update_strName(obj.strName, DATA_CHANGED);
                                    bindings.Update_nPower(obj.nPower, DATA_CHANGED);
                            }
                        }
                        else
                        {
                            switch (propName)
                            {
                                case "nLevel":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_nLevel(obj.nLevel, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "strName":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_strName(obj.strName, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "nPower":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_nPower(obj.nPower, DATA_CHANGED);
                                    }
                                    break;
                                }
                                default:
                                    break;
                            }
                        }
                    }
                }
                public void UpdateChildListeners_(global::MunchkinUWP.Model.Munchkin obj)
                {
                    MainPage_obj32_Bindings bindings;
                    if(WeakRefToBindingObj.TryGetTarget(out bindings))
                    {
                        if (bindings.dataRoot != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)bindings.dataRoot).PropertyChanged -= PropertyChanged_;
                        }
                        if (obj != null)
                        {
                            bindings.dataRoot = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_;
                        }
                    }
                }
            }
        }

        private class MainPage_obj62_Bindings :
            global::Windows.UI.Xaml.IDataTemplateExtension,
            global::Windows.UI.Xaml.Markup.IComponentConnector,
            IMainPage_Bindings
        {
            private global::MunchkinUWP.Model.Munchkin dataRoot;
            private bool initialized = false;
            private const int NOT_PHASED = (1 << 31);
            private const int DATA_CHANGED = (1 << 30);
            private bool removedDataContextHandler = false;

            // Fields for each control that has bindings.
            private global::Windows.UI.Xaml.Controls.TextBlock obj63;

            private MainPage_obj62_BindingsTracking bindingsTracking;

            public MainPage_obj62_Bindings()
            {
                this.bindingsTracking = new MainPage_obj62_BindingsTracking(this);
            }

            // IComponentConnector

            public void Connect(int connectionId, global::System.Object target)
            {
                switch(connectionId)
                {
                    case 63:
                        this.obj63 = (global::Windows.UI.Xaml.Controls.TextBlock)target;
                        break;
                    default:
                        break;
                }
            }

            public void DataContextChangedHandler(global::Windows.UI.Xaml.FrameworkElement sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args)
            {
                 global::MunchkinUWP.Model.Munchkin data = args.NewValue as global::MunchkinUWP.Model.Munchkin;
                 if (args.NewValue != null && data == null)
                 {
                    throw new global::System.ArgumentException("Incorrect type passed into template. Based on the x:DataType global::MunchkinUWP.Model.Munchkin was expected.");
                 }
                 this.SetDataRoot(data);
                 this.Update();
            }

            // IDataTemplateExtension

            public bool ProcessBinding(uint phase)
            {
                throw new global::System.NotImplementedException();
            }

            public int ProcessBindings(global::Windows.UI.Xaml.Controls.ContainerContentChangingEventArgs args)
            {
                int nextPhase = -1;
                switch(args.Phase)
                {
                    case 0:
                        nextPhase = -1;
                        this.SetDataRoot(args.Item as global::MunchkinUWP.Model.Munchkin);
                        if (!removedDataContextHandler)
                        {
                            removedDataContextHandler = true;
                            ((global::Windows.UI.Xaml.Controls.Border)args.ItemContainer.ContentTemplateRoot).DataContextChanged -= this.DataContextChangedHandler;
                        }
                        this.initialized = true;
                        break;
                }
                this.Update_((global::MunchkinUWP.Model.Munchkin) args.Item, 1 << (int)args.Phase);
                return nextPhase;
            }

            public void ResetTemplate()
            {
                this.bindingsTracking.ReleaseAllListeners();
            }

            // IMainPage_Bindings

            public void Initialize()
            {
                if (!this.initialized)
                {
                    this.Update();
                }
            }
            
            public void Update()
            {
                this.Update_(this.dataRoot, NOT_PHASED);
                this.initialized = true;
            }

            public void StopTracking()
            {
                this.bindingsTracking.ReleaseAllListeners();
                this.initialized = false;
            }

            // MainPage_obj62_Bindings

            public void SetDataRoot(global::MunchkinUWP.Model.Munchkin newDataRoot)
            {
                this.bindingsTracking.ReleaseAllListeners();
                this.dataRoot = newDataRoot;
            }

            // Update methods for each path node used in binding steps.
            private void Update_(global::MunchkinUWP.Model.Munchkin obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_(obj);
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_strName(obj.strName, phase);
                    }
                }
            }
            private void Update_strName(global::System.String obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBlock_Text(this.obj63, obj, null);
                }
            }

            private class MainPage_obj62_BindingsTracking
            {
                global::System.WeakReference<MainPage_obj62_Bindings> WeakRefToBindingObj; 

                public MainPage_obj62_BindingsTracking(MainPage_obj62_Bindings obj)
                {
                    WeakRefToBindingObj = new global::System.WeakReference<MainPage_obj62_Bindings>(obj);
                }

                public void ReleaseAllListeners()
                {
                    UpdateChildListeners_(null);
                }

                public void PropertyChanged_(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    MainPage_obj62_Bindings bindings;
                    if(WeakRefToBindingObj.TryGetTarget(out bindings))
                    {
                        string propName = e.PropertyName;
                        global::MunchkinUWP.Model.Munchkin obj = sender as global::MunchkinUWP.Model.Munchkin;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                            if (obj != null)
                            {
                                    bindings.Update_strName(obj.strName, DATA_CHANGED);
                            }
                        }
                        else
                        {
                            switch (propName)
                            {
                                case "strName":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_strName(obj.strName, DATA_CHANGED);
                                    }
                                    break;
                                }
                                default:
                                    break;
                            }
                        }
                    }
                }
                public void UpdateChildListeners_(global::MunchkinUWP.Model.Munchkin obj)
                {
                    MainPage_obj62_Bindings bindings;
                    if(WeakRefToBindingObj.TryGetTarget(out bindings))
                    {
                        if (bindings.dataRoot != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)bindings.dataRoot).PropertyChanged -= PropertyChanged_;
                        }
                        if (obj != null)
                        {
                            bindings.dataRoot = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_;
                        }
                    }
                }
            }
        }

        private class MainPage_obj1_Bindings :
            global::Windows.UI.Xaml.Markup.IComponentConnector,
            IMainPage_Bindings
        {
            private global::MunchkinUWP.Pages.MainPage dataRoot;
            private bool initialized = false;
            private const int NOT_PHASED = (1 << 31);
            private const int DATA_CHANGED = (1 << 30);
            private global::Windows.UI.Xaml.ResourceDictionary localResources;
            private global::System.WeakReference<global::Windows.UI.Xaml.FrameworkElement> converterLookupRoot;

            // Fields for each control that has bindings.
            private global::Windows.UI.Xaml.Controls.ListView obj43;
            private global::Windows.UI.Xaml.Controls.Pivot obj58;

            private MainPage_obj1_BindingsTracking bindingsTracking;

            public MainPage_obj1_Bindings()
            {
                this.bindingsTracking = new MainPage_obj1_BindingsTracking(this);
            }

            // IComponentConnector

            public void Connect(int connectionId, global::System.Object target)
            {
                switch(connectionId)
                {
                    case 43:
                        this.obj43 = (global::Windows.UI.Xaml.Controls.ListView)target;
                        (this.obj43).RegisterPropertyChangedCallback(global::Windows.UI.Xaml.Controls.Primitives.Selector.SelectedItemProperty,
                            (global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DependencyProperty prop) =>
                            {
                                if (this.initialized)
                                {
                                    // Update Two Way binding
                                    this.dataRoot.ViewModel.oCurrentMunchkin = (global::MunchkinUWP.Model.Munchkin)this.LookupConverter("CurrentMunchkinConverter").ConvertBack((this.obj43).SelectedItem, typeof(global::MunchkinUWP.Model.Munchkin), null, null);
                                }
                            });
                        break;
                    case 58:
                        this.obj58 = (global::Windows.UI.Xaml.Controls.Pivot)target;
                        (this.obj58).RegisterPropertyChangedCallback(global::Windows.UI.Xaml.Controls.Pivot.SelectedItemProperty,
                            (global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DependencyProperty prop) =>
                            {
                                if (this.initialized)
                                {
                                    // Update Two Way binding
                                    this.dataRoot.ViewModel.oCurrentMunchkin = (global::MunchkinUWP.Model.Munchkin)this.LookupConverter("CurrentMunchkinConverter").ConvertBack((this.obj58).SelectedItem, typeof(global::MunchkinUWP.Model.Munchkin), null, null);
                                }
                            });
                        break;
                    default:
                        break;
                }
            }

            // IMainPage_Bindings

            public void Initialize()
            {
                if (!this.initialized)
                {
                    this.Update();
                }
            }
            
            public void Update()
            {
                this.Update_(this.dataRoot, NOT_PHASED);
                this.initialized = true;
            }

            public void StopTracking()
            {
                this.bindingsTracking.ReleaseAllListeners();
                this.initialized = false;
            }

            // MainPage_obj1_Bindings

            public void SetDataRoot(global::MunchkinUWP.Pages.MainPage newDataRoot)
            {
                this.bindingsTracking.ReleaseAllListeners();
                this.dataRoot = newDataRoot;
            }

            public void Loading(global::Windows.UI.Xaml.FrameworkElement src, object data)
            {
                this.Initialize();
            }
            public void SetConverterLookupRoot(global::Windows.UI.Xaml.FrameworkElement rootElement)
            {
                this.converterLookupRoot = new global::System.WeakReference<global::Windows.UI.Xaml.FrameworkElement>(rootElement);
            }

            public global::Windows.UI.Xaml.Data.IValueConverter LookupConverter(string key)
            {
                if (this.localResources == null)
                {
                    global::Windows.UI.Xaml.FrameworkElement rootElement;
                    this.converterLookupRoot.TryGetTarget(out rootElement);
                    this.localResources = rootElement.Resources;
                    this.converterLookupRoot = null;
                }
                return (global::Windows.UI.Xaml.Data.IValueConverter) (this.localResources.ContainsKey(key) ? this.localResources[key] : global::Windows.UI.Xaml.Application.Current.Resources[key]);
            }

            // Update methods for each path node used in binding steps.
            private void Update_(global::MunchkinUWP.Pages.MainPage obj, int phase)
            {
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_ViewModel(obj.ViewModel, phase);
                    }
                }
            }
            private void Update_ViewModel(global::MunchkinUWP.Model.Game obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_ViewModel(obj);
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_ViewModel_lstMunchkin(obj.lstMunchkin, phase);
                        this.Update_ViewModel_oCurrentMunchkin(obj.oCurrentMunchkin, phase);
                    }
                }
            }
            private void Update_ViewModel_lstMunchkin(global::System.Collections.ObjectModel.ObservableCollection<global::MunchkinUWP.Model.Munchkin> obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_ItemsControl_ItemsSource(this.obj43, obj, null);
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_ItemsControl_ItemsSource(this.obj58, obj, null);
                }
            }
            private void Update_ViewModel_oCurrentMunchkin(global::MunchkinUWP.Model.Munchkin obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Primitives_Selector_SelectedItem(this.obj43, (global::System.Object)this.LookupConverter("CurrentMunchkinConverter").Convert(obj, typeof(global::System.Object), null, null), null);
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Pivot_SelectedItem(this.obj58, (global::System.Object)this.LookupConverter("CurrentMunchkinConverter").Convert(obj, typeof(global::System.Object), null, null), null);
                }
            }

            private class MainPage_obj1_BindingsTracking
            {
                global::System.WeakReference<MainPage_obj1_Bindings> WeakRefToBindingObj; 

                public MainPage_obj1_BindingsTracking(MainPage_obj1_Bindings obj)
                {
                    WeakRefToBindingObj = new global::System.WeakReference<MainPage_obj1_Bindings>(obj);
                }

                public void ReleaseAllListeners()
                {
                    UpdateChildListeners_ViewModel(null);
                }

                public void PropertyChanged_ViewModel(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    MainPage_obj1_Bindings bindings;
                    if(WeakRefToBindingObj.TryGetTarget(out bindings))
                    {
                        string propName = e.PropertyName;
                        global::MunchkinUWP.Model.Game obj = sender as global::MunchkinUWP.Model.Game;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                            if (obj != null)
                            {
                                    bindings.Update_ViewModel_lstMunchkin(obj.lstMunchkin, DATA_CHANGED);
                                    bindings.Update_ViewModel_oCurrentMunchkin(obj.oCurrentMunchkin, DATA_CHANGED);
                            }
                        }
                        else
                        {
                            switch (propName)
                            {
                                case "lstMunchkin":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_lstMunchkin(obj.lstMunchkin, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "oCurrentMunchkin":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_oCurrentMunchkin(obj.oCurrentMunchkin, DATA_CHANGED);
                                    }
                                    break;
                                }
                                default:
                                    break;
                            }
                        }
                    }
                }
                private global::MunchkinUWP.Model.Game cache_ViewModel = null;
                public void UpdateChildListeners_ViewModel(global::MunchkinUWP.Model.Game obj)
                {
                    if (obj != cache_ViewModel)
                    {
                        if (cache_ViewModel != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)cache_ViewModel).PropertyChanged -= PropertyChanged_ViewModel;
                            cache_ViewModel = null;
                        }
                        if (obj != null)
                        {
                            cache_ViewModel = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_ViewModel;
                        }
                    }
                }
                public void PropertyChanged_ViewModel_lstMunchkin(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    MainPage_obj1_Bindings bindings;
                    if(WeakRefToBindingObj.TryGetTarget(out bindings))
                    {
                        string propName = e.PropertyName;
                        global::System.Collections.ObjectModel.ObservableCollection<global::MunchkinUWP.Model.Munchkin> obj = sender as global::System.Collections.ObjectModel.ObservableCollection<global::MunchkinUWP.Model.Munchkin>;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                        }
                        else
                        {
                            switch (propName)
                            {
                                default:
                                    break;
                            }
                        }
                    }
                }
                public void CollectionChanged_ViewModel_lstMunchkin(object sender, global::System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
                {
                    MainPage_obj1_Bindings bindings;
                    if(WeakRefToBindingObj.TryGetTarget(out bindings))
                    {
                        global::System.Collections.ObjectModel.ObservableCollection<global::MunchkinUWP.Model.Munchkin> obj = sender as global::System.Collections.ObjectModel.ObservableCollection<global::MunchkinUWP.Model.Munchkin>;
                    }
                }
                public void PropertyChanged_ViewModel_oCurrentMunchkin(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    MainPage_obj1_Bindings bindings;
                    if(WeakRefToBindingObj.TryGetTarget(out bindings))
                    {
                        string propName = e.PropertyName;
                        global::MunchkinUWP.Model.Munchkin obj = sender as global::MunchkinUWP.Model.Munchkin;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                        }
                        else
                        {
                            switch (propName)
                            {
                                default:
                                    break;
                            }
                        }
                    }
                }
            }
        }
        /// <summary>
        /// Connect()
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 14.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void Connect(int connectionId, object target)
        {
            switch(connectionId)
            {
            case 1:
                {
                    this.MainPageRoot = (global::Windows.UI.Xaml.Controls.Page)(target);
                }
                break;
            case 2:
                {
                    this.Gender = (global::Windows.UI.Xaml.Style)(target);
                }
                break;
            case 3:
                {
                    this.GenderMale = (global::Windows.UI.Xaml.DataTemplate)(target);
                }
                break;
            case 4:
                {
                    this.GenderFemale = (global::Windows.UI.Xaml.DataTemplate)(target);
                }
                break;
            case 5:
                {
                    this.GenderNone = (global::Windows.UI.Xaml.DataTemplate)(target);
                }
                break;
            case 6:
                {
                    this.MasterListViewItemTemplate_Normal = (global::Windows.UI.Xaml.DataTemplate)(target);
                }
                break;
            case 7:
                {
                    this.MasterListViewItemTemplate_Light = (global::Windows.UI.Xaml.DataTemplate)(target);
                }
                break;
            case 8:
                {
                    this.MasterListViewItemTemplate_Edit = (global::Windows.UI.Xaml.DataTemplate)(target);
                }
                break;
            case 11:
                {
                    global::Windows.UI.Xaml.Controls.Button element11 = (global::Windows.UI.Xaml.Controls.Button)(target);
                    #line 227 "..\..\..\..\UI\Pages\MainPage.xaml"
                    ((global::Windows.UI.Xaml.Controls.Button)element11).Click += this.BtnOverviewDelete_Click;
                    #line default
                }
                break;
            case 23:
                {
                    global::Windows.UI.Xaml.Controls.Button element23 = (global::Windows.UI.Xaml.Controls.Button)(target);
                    #line 160 "..\..\..\..\UI\Pages\MainPage.xaml"
                    ((global::Windows.UI.Xaml.Controls.Button)element23).SizeChanged += this.Button_SizeChanged;
                    #line 160 "..\..\..\..\UI\Pages\MainPage.xaml"
                    ((global::Windows.UI.Xaml.Controls.Button)element23).Click += this.BtnGearMore_Click;
                    #line default
                }
                break;
            case 24:
                {
                    global::Windows.UI.Xaml.Controls.Button element24 = (global::Windows.UI.Xaml.Controls.Button)(target);
                    #line 155 "..\..\..\..\UI\Pages\MainPage.xaml"
                    ((global::Windows.UI.Xaml.Controls.Button)element24).SizeChanged += this.Button_SizeChanged;
                    #line 155 "..\..\..\..\UI\Pages\MainPage.xaml"
                    ((global::Windows.UI.Xaml.Controls.Button)element24).Click += this.BtnLevelMore_Click;
                    #line default
                }
                break;
            case 25:
                {
                    global::Windows.UI.Xaml.Controls.Button element25 = (global::Windows.UI.Xaml.Controls.Button)(target);
                    #line 150 "..\..\..\..\UI\Pages\MainPage.xaml"
                    ((global::Windows.UI.Xaml.Controls.Button)element25).SizeChanged += this.Button_SizeChanged;
                    #line 150 "..\..\..\..\UI\Pages\MainPage.xaml"
                    ((global::Windows.UI.Xaml.Controls.Button)element25).Click += this.BtnGearLess_Click;
                    #line default
                }
                break;
            case 26:
                {
                    global::Windows.UI.Xaml.Controls.Button element26 = (global::Windows.UI.Xaml.Controls.Button)(target);
                    #line 145 "..\..\..\..\UI\Pages\MainPage.xaml"
                    ((global::Windows.UI.Xaml.Controls.Button)element26).SizeChanged += this.Button_SizeChanged;
                    #line 145 "..\..\..\..\UI\Pages\MainPage.xaml"
                    ((global::Windows.UI.Xaml.Controls.Button)element26).Click += this.BtnLevelLess_Click;
                    #line default
                }
                break;
            case 29:
                {
                    global::Windows.UI.Xaml.Controls.ContentPresenter element29 = (global::Windows.UI.Xaml.Controls.ContentPresenter)(target);
                    #line 126 "..\..\..\..\UI\Pages\MainPage.xaml"
                    ((global::Windows.UI.Xaml.Controls.ContentPresenter)element29).Tapped += this.SwitchGender;
                    #line 126 "..\..\..\..\UI\Pages\MainPage.xaml"
                    ((global::Windows.UI.Xaml.Controls.ContentPresenter)element29).Loaded += this.Gender_Loaded;
                    #line default
                }
                break;
            case 36:
                {
                    this.RootView = (global::Windows.UI.Xaml.Controls.SplitView)(target);
                    #line 232 "..\..\..\..\UI\Pages\MainPage.xaml"
                    ((global::Windows.UI.Xaml.Controls.SplitView)this.RootView).SizeChanged += this.RootView_SizeChanged;
                    #line default
                }
                break;
            case 37:
                {
                    this.AdaptiveStates = (global::Windows.UI.Xaml.VisualStateGroup)(target);
                    #line 234 "..\..\..\..\UI\Pages\MainPage.xaml"
                    ((global::Windows.UI.Xaml.VisualStateGroup)this.AdaptiveStates).CurrentStateChanged += this.AdaptiveStates_CurrentStateChanged;
                    #line default
                }
                break;
            case 38:
                {
                    this.WideState = (global::Windows.UI.Xaml.VisualState)(target);
                }
                break;
            case 39:
                {
                    this.DetailState = (global::Windows.UI.Xaml.VisualState)(target);
                }
                break;
            case 40:
                {
                    this.OverviewState = (global::Windows.UI.Xaml.VisualState)(target);
                }
                break;
            case 41:
                {
                    this.EditTip = (global::Windows.UI.Xaml.Controls.RowDefinition)(target);
                }
                break;
            case 42:
                {
                    this.CommandbarOrder = (global::Windows.UI.Xaml.Controls.CommandBar)(target);
                }
                break;
            case 43:
                {
                    this.MasterListView = (global::Windows.UI.Xaml.Controls.ListView)(target);
                    #line 285 "..\..\..\..\UI\Pages\MainPage.xaml"
                    ((global::Windows.UI.Xaml.Controls.ListView)this.MasterListView).ItemClick += this.MasterListView_ItemClick;
                    #line default
                }
                break;
            case 44:
                {
                    this.EditTipTxT = (global::Windows.UI.Xaml.Controls.TextBlock)(target);
                }
                break;
            case 45:
                {
                    this.CommandbarControl = (global::Windows.UI.Xaml.Controls.CommandBar)(target);
                }
                break;
            case 46:
                {
                    this.StartTipTxT = (global::Windows.UI.Xaml.Controls.Button)(target);
                    #line 306 "..\..\..\..\UI\Pages\MainPage.xaml"
                    ((global::Windows.UI.Xaml.Controls.Button)this.StartTipTxT).Click += this.BtnOverviewAdd_Click;
                    #line default
                }
                break;
            case 47:
                {
                    this.AppBarButton_Remote = (global::Windows.UI.Xaml.Controls.AppBarButton)(target);
                    #line 297 "..\..\..\..\UI\Pages\MainPage.xaml"
                    ((global::Windows.UI.Xaml.Controls.AppBarButton)this.AppBarButton_Remote).Click += this.AppBarButton_Remote_Click;
                    #line default
                }
                break;
            case 48:
                {
                    this.AppBarButton_Settings = (global::Windows.UI.Xaml.Controls.AppBarButton)(target);
                    #line 298 "..\..\..\..\UI\Pages\MainPage.xaml"
                    ((global::Windows.UI.Xaml.Controls.AppBarButton)this.AppBarButton_Settings).Click += this.AppBarButton_Settings_Click;
                    #line default
                }
                break;
            case 49:
                {
                    this.AppBarSeperator1 = (global::Windows.UI.Xaml.Controls.AppBarSeparator)(target);
                }
                break;
            case 50:
                {
                    this.AppBarButton_Add = (global::Windows.UI.Xaml.Controls.AppBarButton)(target);
                    #line 300 "..\..\..\..\UI\Pages\MainPage.xaml"
                    ((global::Windows.UI.Xaml.Controls.AppBarButton)this.AppBarButton_Add).Click += this.BtnOverviewAdd_Click;
                    #line default
                }
                break;
            case 51:
                {
                    this.AppBarButton_Edit = (global::Windows.UI.Xaml.Controls.AppBarButton)(target);
                    #line 301 "..\..\..\..\UI\Pages\MainPage.xaml"
                    ((global::Windows.UI.Xaml.Controls.AppBarButton)this.AppBarButton_Edit).Click += this.AppBarButton_Edit_Click;
                    #line default
                }
                break;
            case 52:
                {
                    this.AppBarButton_EditFinish = (global::Windows.UI.Xaml.Controls.AppBarButton)(target);
                    #line 302 "..\..\..\..\UI\Pages\MainPage.xaml"
                    ((global::Windows.UI.Xaml.Controls.AppBarButton)this.AppBarButton_EditFinish).Click += this.AppBarButton_EditFinish_Click;
                    #line default
                }
                break;
            case 53:
                {
                    this.Overview_OrderBtn_LvL = (global::Windows.UI.Xaml.Controls.AppBarToggleButton)(target);
                    #line 273 "..\..\..\..\UI\Pages\MainPage.xaml"
                    ((global::Windows.UI.Xaml.Controls.AppBarToggleButton)this.Overview_OrderBtn_LvL).Click += this.Overview_OrderBtn_LvL_Click;
                    #line default
                }
                break;
            case 54:
                {
                    this.Overview_OrderBtn_Power = (global::Windows.UI.Xaml.Controls.AppBarToggleButton)(target);
                    #line 274 "..\..\..\..\UI\Pages\MainPage.xaml"
                    ((global::Windows.UI.Xaml.Controls.AppBarToggleButton)this.Overview_OrderBtn_Power).Click += this.Overview_OrderBtn_Power_Click;
                    #line default
                }
                break;
            case 55:
                {
                    this.Overview_OrderBtn_Alpha = (global::Windows.UI.Xaml.Controls.AppBarToggleButton)(target);
                    #line 275 "..\..\..\..\UI\Pages\MainPage.xaml"
                    ((global::Windows.UI.Xaml.Controls.AppBarToggleButton)this.Overview_OrderBtn_Alpha).Click += this.Overview_OrderBtn_Alpha_Click;
                    #line default
                }
                break;
            case 56:
                {
                    this.Overview_OrderBtn_Order = (global::Windows.UI.Xaml.Controls.AppBarToggleButton)(target);
                    #line 276 "..\..\..\..\UI\Pages\MainPage.xaml"
                    ((global::Windows.UI.Xaml.Controls.AppBarToggleButton)this.Overview_OrderBtn_Order).Click += this.Overview_OrderBtn_Order_Click;
                    #line default
                }
                break;
            case 57:
                {
                    this.MainGrid = (global::Windows.UI.Xaml.Controls.Grid)(target);
                }
                break;
            case 58:
                {
                    this.DetailPivotView = (global::Windows.UI.Xaml.Controls.Pivot)(target);
                }
                break;
            case 59:
                {
                    this.CommandbarMunchkin = (global::Windows.UI.Xaml.Controls.CommandBar)(target);
                }
                break;
            case 60:
                {
                    this.BtnBattle = (global::Windows.UI.Xaml.Controls.AppBarButton)(target);
                    #line 336 "..\..\..\..\UI\Pages\MainPage.xaml"
                    ((global::Windows.UI.Xaml.Controls.AppBarButton)this.BtnBattle).Click += this.AppBarButton_Battle_Click;
                    #line default
                }
                break;
            case 61:
                {
                    this.BtnRandom = (global::Windows.UI.Xaml.Controls.AppBarButton)(target);
                    #line 337 "..\..\..\..\UI\Pages\MainPage.xaml"
                    ((global::Windows.UI.Xaml.Controls.AppBarButton)this.BtnRandom).Click += this.AppBarButton_Random_Click;
                    #line default
                }
                break;
            default:
                break;
            }
            this._contentLoaded = true;
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 14.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::Windows.UI.Xaml.Markup.IComponentConnector GetBindingConnector(int connectionId, object target)
        {
            global::Windows.UI.Xaml.Markup.IComponentConnector returnValue = null;
            switch(connectionId)
            {
            case 1:
                {
                    global::Windows.UI.Xaml.Controls.Page element1 = (global::Windows.UI.Xaml.Controls.Page)target;
                    MainPage_obj1_Bindings bindings = new MainPage_obj1_Bindings();
                    returnValue = bindings;
                    bindings.SetDataRoot(this);
                    bindings.SetConverterLookupRoot(this);
                    this.Bindings = bindings;
                    element1.Loading += bindings.Loading;
                }
                break;
            case 9:
                {
                    global::Windows.UI.Xaml.Controls.Grid element9 = (global::Windows.UI.Xaml.Controls.Grid)target;
                    MainPage_obj9_Bindings bindings = new MainPage_obj9_Bindings();
                    returnValue = bindings;
                    bindings.SetDataRoot((global::MunchkinUWP.Model.Munchkin) element9.DataContext);
                    element9.DataContextChanged += bindings.DataContextChangedHandler;
                    global::Windows.UI.Xaml.DataTemplate.SetExtensionInstance(element9, bindings);
                }
                break;
            case 12:
                {
                    global::Windows.UI.Xaml.Controls.Grid element12 = (global::Windows.UI.Xaml.Controls.Grid)target;
                    MainPage_obj12_Bindings bindings = new MainPage_obj12_Bindings();
                    returnValue = bindings;
                    bindings.SetDataRoot((global::MunchkinUWP.Model.Munchkin) element12.DataContext);
                    element12.DataContextChanged += bindings.DataContextChangedHandler;
                    global::Windows.UI.Xaml.DataTemplate.SetExtensionInstance(element12, bindings);
                }
                break;
            case 17:
                {
                    global::Windows.UI.Xaml.Controls.Grid element17 = (global::Windows.UI.Xaml.Controls.Grid)target;
                    MainPage_obj17_Bindings bindings = new MainPage_obj17_Bindings();
                    returnValue = bindings;
                    bindings.SetDataRoot((global::MunchkinUWP.Model.Munchkin) element17.DataContext);
                    element17.DataContextChanged += bindings.DataContextChangedHandler;
                    global::Windows.UI.Xaml.DataTemplate.SetExtensionInstance(element17, bindings);
                }
                break;
            case 21:
                {
                    global::Windows.UI.Xaml.Controls.Grid element21 = (global::Windows.UI.Xaml.Controls.Grid)target;
                    MainPage_obj21_Bindings bindings = new MainPage_obj21_Bindings();
                    returnValue = bindings;
                    bindings.SetDataRoot((global::MunchkinUWP.Model.Munchkin) element21.DataContext);
                    bindings.SetConverterLookupRoot(this);
                    element21.DataContextChanged += bindings.DataContextChangedHandler;
                    global::Windows.UI.Xaml.DataTemplate.SetExtensionInstance(element21, bindings);
                }
                break;
            case 32:
                {
                    global::Windows.UI.Xaml.Controls.Grid element32 = (global::Windows.UI.Xaml.Controls.Grid)target;
                    MainPage_obj32_Bindings bindings = new MainPage_obj32_Bindings();
                    returnValue = bindings;
                    bindings.SetDataRoot((global::MunchkinUWP.Model.Munchkin) element32.DataContext);
                    element32.DataContextChanged += bindings.DataContextChangedHandler;
                    global::Windows.UI.Xaml.DataTemplate.SetExtensionInstance(element32, bindings);
                }
                break;
            case 62:
                {
                    global::Windows.UI.Xaml.Controls.Border element62 = (global::Windows.UI.Xaml.Controls.Border)target;
                    MainPage_obj62_Bindings bindings = new MainPage_obj62_Bindings();
                    returnValue = bindings;
                    bindings.SetDataRoot((global::MunchkinUWP.Model.Munchkin) element62.DataContext);
                    element62.DataContextChanged += bindings.DataContextChangedHandler;
                    global::Windows.UI.Xaml.DataTemplate.SetExtensionInstance(element62, bindings);
                }
                break;
            }
            return returnValue;
        }
    }
}

